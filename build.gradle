plugins {
    id 'io.freefair.lombok' version '8.6'
    id 'com.github.johnrengelman.shadow' version '7.1.2'
    id 'java'
    id 'antlr'
}

group = 'com.jlang'
version = '1.0-SNAPSHOT'

java {
    toolchain {
        languageVersion = JavaLanguageVersion.of(21)
    }
}

repositories {
    mavenCentral()
}

/**
 * Without the next section Gradle will add a 'compile' dependency on Antlr3:
 * https://github.com/gradle/gradle/issues/820
 */
configurations {
    compile {
        extendsFrom = extendsFrom.findAll { it != configurations.antlr }
    }
}

dependencies {
    antlr 'org.antlr:antlr4:4.13.1'

    compile 'org.antlr:antlr4-runtime:4.13.1'

    implementation 'io.vavr:vavr:0.10.4'
    implementation 'net.objecthunter:exp4j:0.4.8'

    testImplementation 'org.junit.jupiter:junit-jupiter:5.10.2'
    testImplementation 'org.assertj:assertj-core:3.25.1'
    testImplementation 'org.mockito:mockito-core:5.+'
    testImplementation 'org.mockito:mockito-junit-jupiter:5.+'
    testImplementation 'org.assertj:assertj-vavr:0.4.3'
    testRuntimeOnly 'org.junit.platform:junit-platform-launcher'
}


tasks {

    /**
     * Generates the ANTLR sources.
     * The following is a workaround for the issue described here:
     * https://stackoverflow.com/questions/1655854/how-to-specify-a-target-package-for-antlr
     */
    generateGrammarSource {
        def pkg = "com.jlang.antlr"
        arguments += ["-package", pkg]
        outputDirectory = new File(outputDirectory, pkg.replace('.', '/'))
    }

    test {
        useJUnitPlatform()
    }
}

jar {
    manifest {
        attributes(
                'Main-Class': 'com.jlang.Main'
        )
    }
}